{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nlet globalVoices = []; // get voice in redux\n\nfunction useSpeaker() {\n  _s();\n\n  const [voices, setVoices] = useState(globalVoices);\n  const {\n    speed,\n    voiceURI,\n    volume\n  } = useSelector(state => state.voiceReducer);\n  const voice = voices.find(i => i.voiceURI === voiceURI);\n  useEffect(() => {\n    if (globalVoices.length > 0) return;\n    const intervalId = setInterval(() => {\n      const voiceList = window.speechSynthesis.getVoices();\n\n      if (voiceList.length > 0) {\n        globalVoices = voiceList.filter(i => i.lang.indexOf('en') !== -1);\n        setVoices(voiceList.filter(i => i.lang.indexOf('en') !== -1));\n        clearInterval(intervalId);\n      }\n    }, 50);\n    return () => {\n      intervalId && clearInterval(intervalId);\n    };\n  }, []);\n  return {\n    speed,\n    volume,\n    voice\n  };\n}\n\n_s(useSpeaker, \"c9TVPCk5d1LIdztO0V4SupTQX1A=\", false, function () {\n  return [useSelector];\n});\n\nexport default useSpeaker;","map":{"version":3,"names":["useEffect","useState","useSelector","globalVoices","useSpeaker","voices","setVoices","speed","voiceURI","volume","state","voiceReducer","voice","find","i","length","intervalId","setInterval","voiceList","window","speechSynthesis","getVoices","filter","lang","indexOf","clearInterval"],"sources":["C:/Users/PC2/Desktop/_blgashLMS/frontend/src/hooks/useSpeaker.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nlet globalVoices = [];\n\n// get voice in redux\nfunction useSpeaker() {\n  const [voices, setVoices] = useState(globalVoices);\n  const { speed, voiceURI, volume } = useSelector((state) => state.voiceReducer);\n  const voice = voices.find((i) => i.voiceURI === voiceURI);\n\n  useEffect(() => {\n    if (globalVoices.length > 0) return;\n\n    const intervalId = setInterval(() => {\n      const voiceList = window.speechSynthesis.getVoices();\n      if (voiceList.length > 0) {\n        globalVoices = voiceList.filter((i) => i.lang.indexOf('en') !== -1);\n        setVoices(voiceList.filter((i) => i.lang.indexOf('en') !== -1));\n        clearInterval(intervalId);\n      }\n    }, 50);\n\n    return () => {\n      intervalId && clearInterval(intervalId);\n    };\n  }, []);\n\n  return { speed, volume, voice };\n}\n\nexport default useSpeaker;\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,IAAIC,YAAY,GAAG,EAAnB,C,CAEA;;AACA,SAASC,UAAT,GAAsB;EAAA;;EACpB,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAACE,YAAD,CAApC;EACA,MAAM;IAAEI,KAAF;IAASC,QAAT;IAAmBC;EAAnB,IAA8BP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,YAAlB,CAA/C;EACA,MAAMC,KAAK,GAAGP,MAAM,CAACQ,IAAP,CAAaC,CAAD,IAAOA,CAAC,CAACN,QAAF,KAAeA,QAAlC,CAAd;EAEAR,SAAS,CAAC,MAAM;IACd,IAAIG,YAAY,CAACY,MAAb,GAAsB,CAA1B,EAA6B;IAE7B,MAAMC,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnC,MAAMC,SAAS,GAAGC,MAAM,CAACC,eAAP,CAAuBC,SAAvB,EAAlB;;MACA,IAAIH,SAAS,CAACH,MAAV,GAAmB,CAAvB,EAA0B;QACxBZ,YAAY,GAAGe,SAAS,CAACI,MAAV,CAAkBR,CAAD,IAAOA,CAAC,CAACS,IAAF,CAAOC,OAAP,CAAe,IAAf,MAAyB,CAAC,CAAlD,CAAf;QACAlB,SAAS,CAACY,SAAS,CAACI,MAAV,CAAkBR,CAAD,IAAOA,CAAC,CAACS,IAAF,CAAOC,OAAP,CAAe,IAAf,MAAyB,CAAC,CAAlD,CAAD,CAAT;QACAC,aAAa,CAACT,UAAD,CAAb;MACD;IACF,CAP6B,EAO3B,EAP2B,CAA9B;IASA,OAAO,MAAM;MACXA,UAAU,IAAIS,aAAa,CAACT,UAAD,CAA3B;IACD,CAFD;EAGD,CAfQ,EAeN,EAfM,CAAT;EAiBA,OAAO;IAAET,KAAF;IAASE,MAAT;IAAiBG;EAAjB,CAAP;AACD;;GAvBQR,U;UAE6BF,W;;;AAuBtC,eAAeE,UAAf"},"metadata":{},"sourceType":"module"}