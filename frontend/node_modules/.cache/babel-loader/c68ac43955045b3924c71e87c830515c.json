{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC2\\\\Desktop\\\\_blgashLMS\\\\frontend\\\\src\\\\components\\\\WordUser\\\\Vocabulary\\\\data.js\",\n    _s = $RefreshSig$();\n\nimport commonApi from 'apis/commonApi';\nimport wordApi from 'apis/wordApi';\nimport { equalArray } from 'helper';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { setMessage } from 'redux/actions/messageAction';\nimport Vocabulary from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst perPage = 7;\n\nfunction VocabularyData() {\n  _s();\n\n  const dispatch = useDispatch();\n  const topicParams = useParams().topic;\n  const list = useRef([]); // list store all item to prevent call API when prev button click\n\n  const [currentList, setCurrentList] = useState([]);\n  const [total, setTotal] = useState(-1);\n  const [pageInfo, setPageInfo] = useState({\n    page: 1,\n    packInfo: {\n      topics: [topicParams]\n    }\n  }); // get total word pack\n\n  useEffect(() => {\n    let isSubscribe = true;\n\n    if (total !== -1) {\n      return;\n    }\n\n    (async function getTotalWordPack() {\n      try {\n        const apiRes = await commonApi.getWordTopicTotal(pageInfo.packInfo);\n\n        if (apiRes.status === 200 && isSubscribe) {\n          const total = apiRes.data.total;\n\n          if (total === 0) {\n            dispatch(setMessage(\"No word for this topic.\", \"warning\"));\n          }\n\n          setTotal(total);\n        }\n      } catch (error) {\n        setTotal(0);\n      }\n    })();\n\n    return () => isSubscribe = false;\n  }, [total]); // get word pack when page change\n\n  useEffect(() => {\n    let isSubscribe = true;\n    if (pageInfo.page < list.current.length / perPage) return; // prevent call API when element already exists in the old array\n\n    async function getVocabularyList() {\n      try {\n        const apiRes = await wordApi.getWordTopic(pageInfo.packInfo);\n\n        if (apiRes.status === 200 && isSubscribe) {\n          const filterList = apiRes.data.filter(item => {\n            return item.isLocked === 0;\n          });\n          setCurrentList(filterList);\n          list.current = [...list.current, filterList];\n        }\n      } catch (error) {}\n    }\n\n    isSubscribe && getVocabularyList();\n    return () => isSubscribe = false;\n  }, [pageInfo]);\n  return /*#__PURE__*/_jsxDEV(Vocabulary, {\n    list: currentList,\n    total: total\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VocabularyData, \"RnGZb822f5aQKEBuLANEsqWX1sQ=\", false, function () {\n  return [useDispatch, useParams];\n});\n\n_c = VocabularyData;\nexport default VocabularyData;\n\nvar _c;\n\n$RefreshReg$(_c, \"VocabularyData\");","map":{"version":3,"names":["commonApi","wordApi","equalArray","React","useEffect","useRef","useState","useDispatch","useParams","setMessage","Vocabulary","perPage","VocabularyData","dispatch","topicParams","topic","list","currentList","setCurrentList","total","setTotal","pageInfo","setPageInfo","page","packInfo","topics","isSubscribe","getTotalWordPack","apiRes","getWordTopicTotal","status","data","error","current","length","getVocabularyList","getWordTopic","filterList","filter","item","isLocked"],"sources":["C:/Users/PC2/Desktop/_blgashLMS/frontend/src/components/WordUser/Vocabulary/data.js"],"sourcesContent":["import commonApi from 'apis/commonApi';\nimport wordApi from 'apis/wordApi';\nimport { equalArray } from 'helper';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { setMessage } from 'redux/actions/messageAction';\nimport Vocabulary from '.';\n\nconst perPage = 7;\n\nfunction VocabularyData() {\n  const dispatch = useDispatch();\n  const topicParams =useParams().topic;\n\n  const list = useRef([]); // list store all item to prevent call API when prev button click\n  const [currentList, setCurrentList] = useState([]);\n  const [total, setTotal] = useState(-1);\n  const [pageInfo, setPageInfo] = useState({\n    page: 1,\n    packInfo: {\n    topics:[topicParams],\n    }\n  });\n\n  // get total word pack\n  useEffect(() => {\n    let isSubscribe = true;\n\n    if (total !== -1) {\n      return;\n    }\n\n    (async function getTotalWordPack() {\n      try {\n        const apiRes = await commonApi.getWordTopicTotal(pageInfo.packInfo);\n\n        if (apiRes.status === 200 && isSubscribe) {\n          const total = apiRes.data.total;\n          if (total === 0) {\n            dispatch(\n              setMessage(\"No word for this topic.\",\"warning\")\n            );\n          }\n          setTotal(total);\n        \n        }\n      } catch (error) {\n        setTotal(0);\n      }\n    })();\n\n    return () => (isSubscribe = false);\n  }, [total]);\n\n\n  // get word pack when page change\n  useEffect(() => {\n    let isSubscribe = true;\n    if (pageInfo.page < list.current.length / perPage) return; // prevent call API when element already exists in the old array\n\n    async function getVocabularyList() {\n      try {\n        const apiRes = await wordApi.getWordTopic(pageInfo.packInfo);\n\n        if (apiRes.status === 200 && isSubscribe) {\n          const filterList = apiRes.data.filter((item) => {\n            return item.isLocked === 0\n          })\n          setCurrentList(filterList);\n          list.current = [...list.current, filterList];\n        }\n      } catch (error) {}\n    }\n\n    isSubscribe && getVocabularyList();\n\n    return () => (isSubscribe = false);\n  }, [pageInfo]);\n\n\n  return (\n    <Vocabulary\n     list={currentList}\n      total={total}\n    />\n  );\n}\n\nexport default VocabularyData;\n"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,UAAP,MAAuB,GAAvB;;AAEA,MAAMC,OAAO,GAAG,CAAhB;;AAEA,SAASC,cAAT,GAA0B;EAAA;;EACxB,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;EACA,MAAMO,WAAW,GAAEN,SAAS,GAAGO,KAA/B;EAEA,MAAMC,IAAI,GAAGX,MAAM,CAAC,EAAD,CAAnB,CAJwB,CAIC;;EACzB,MAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,CAAC,CAAF,CAAlC;EACA,MAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC;IACvCiB,IAAI,EAAE,CADiC;IAEvCC,QAAQ,EAAE;MACVC,MAAM,EAAC,CAACX,WAAD;IADG;EAF6B,CAAD,CAAxC,CAPwB,CAcxB;;EACAV,SAAS,CAAC,MAAM;IACd,IAAIsB,WAAW,GAAG,IAAlB;;IAEA,IAAIP,KAAK,KAAK,CAAC,CAAf,EAAkB;MAChB;IACD;;IAED,CAAC,eAAeQ,gBAAf,GAAkC;MACjC,IAAI;QACF,MAAMC,MAAM,GAAG,MAAM5B,SAAS,CAAC6B,iBAAV,CAA4BR,QAAQ,CAACG,QAArC,CAArB;;QAEA,IAAII,MAAM,CAACE,MAAP,KAAkB,GAAlB,IAAyBJ,WAA7B,EAA0C;UACxC,MAAMP,KAAK,GAAGS,MAAM,CAACG,IAAP,CAAYZ,KAA1B;;UACA,IAAIA,KAAK,KAAK,CAAd,EAAiB;YACfN,QAAQ,CACNJ,UAAU,CAAC,yBAAD,EAA2B,SAA3B,CADJ,CAAR;UAGD;;UACDW,QAAQ,CAACD,KAAD,CAAR;QAED;MACF,CAbD,CAaE,OAAOa,KAAP,EAAc;QACdZ,QAAQ,CAAC,CAAD,CAAR;MACD;IACF,CAjBD;;IAmBA,OAAO,MAAOM,WAAW,GAAG,KAA5B;EACD,CA3BQ,EA2BN,CAACP,KAAD,CA3BM,CAAT,CAfwB,CA6CxB;;EACAf,SAAS,CAAC,MAAM;IACd,IAAIsB,WAAW,GAAG,IAAlB;IACA,IAAIL,QAAQ,CAACE,IAAT,GAAgBP,IAAI,CAACiB,OAAL,CAAaC,MAAb,GAAsBvB,OAA1C,EAAmD,OAFrC,CAE6C;;IAE3D,eAAewB,iBAAf,GAAmC;MACjC,IAAI;QACF,MAAMP,MAAM,GAAG,MAAM3B,OAAO,CAACmC,YAAR,CAAqBf,QAAQ,CAACG,QAA9B,CAArB;;QAEA,IAAII,MAAM,CAACE,MAAP,KAAkB,GAAlB,IAAyBJ,WAA7B,EAA0C;UACxC,MAAMW,UAAU,GAAGT,MAAM,CAACG,IAAP,CAAYO,MAAZ,CAAoBC,IAAD,IAAU;YAC9C,OAAOA,IAAI,CAACC,QAAL,KAAkB,CAAzB;UACD,CAFkB,CAAnB;UAGAtB,cAAc,CAACmB,UAAD,CAAd;UACArB,IAAI,CAACiB,OAAL,GAAe,CAAC,GAAGjB,IAAI,CAACiB,OAAT,EAAkBI,UAAlB,CAAf;QACD;MACF,CAVD,CAUE,OAAOL,KAAP,EAAc,CAAE;IACnB;;IAEDN,WAAW,IAAIS,iBAAiB,EAAhC;IAEA,OAAO,MAAOT,WAAW,GAAG,KAA5B;EACD,CArBQ,EAqBN,CAACL,QAAD,CArBM,CAAT;EAwBA,oBACE,QAAC,UAAD;IACC,IAAI,EAAEJ,WADP;IAEE,KAAK,EAAEE;EAFT;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;GA5EQP,c;UACUL,W,EACEC,S;;;KAFZI,c;AA8ET,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}