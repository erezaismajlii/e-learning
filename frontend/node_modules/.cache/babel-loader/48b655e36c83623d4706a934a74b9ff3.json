{"ast":null,"code":"import questionApi from \"./../../apis/questionApi\";\nimport authReducer from \"../reducers/authReducer\";\nimport QUESTION_CONSTANT from \"../constants/questionConstant\";\nexport const getQuestion = id => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        authReducer: {\n          user\n        }\n      } = getState();\n      const response = await questionApi.getQuestion(id, user.access_token);\n\n      if (response.status === 200) {\n        dispatch({\n          type: QUESTION_CONSTANT.GET_QUESTION,\n          payload: response.data.question\n        });\n      } else {\n        dispatch({\n          type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const getQuestionByQuiz = id => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        authReducer: {\n          user\n        }\n      } = getState();\n      const response = await questionApi.getQuestionByQuiz(id, user.access_token);\n\n      if (response.status === 200) {\n        dispatch({\n          type: QUESTION_CONSTANT.GET_QUESTION_BY_QUIZ,\n          payload: response.data.questions\n        });\n      } else {\n        dispatch({\n          type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const postQuestionByQuiz = (id, formData) => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        authReducer: {\n          user\n        }\n      } = getState();\n      const response = await questionApi.postQuestion(id, formData, user.access_token);\n\n      if (response.status === 200) {\n        dispatch({\n          type: QUESTION_CONSTANT.CREATE_QUESTION,\n          payload: response.data.question\n        });\n      } else {\n        dispatch({\n          type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const putQuestion = (id, formData) => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        authReducer: {\n          user\n        }\n      } = getState();\n      const response = await questionApi.putQuestion(id, formData, user.access_token);\n\n      if (response.status === 200) {\n        dispatch({\n          type: QUESTION_CONSTANT.EDIT_QUESTION,\n          payload: response.data.question\n        });\n      } else {\n        dispatch({\n          type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const deleteQuestion = id => {\n  return async dispatch => {\n    try {\n      const response = await questionApi.deleteQuestion(id);\n\n      if (response.status === 200) {\n        dispatch({\n          type: QUESTION_CONSTANT.DELETE_QUESTION,\n          payload: id\n        });\n      } else {\n        dispatch({\n          type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const deleteQuestionByQuiz = (id, formData) => {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        authReducer: {\n          user\n        }\n      } = getState();\n      const response = await questionApi.deleteQuestionByQuiz(id, formData, user.access_token);\n\n      if (response.status === 200) {\n        dispatch({\n          type: QUESTION_CONSTANT.DELETE_QUESTION_BY_QUIZ,\n          payload: id\n        });\n      } else {\n        dispatch({\n          type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n        payload: error.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["questionApi","authReducer","QUESTION_CONSTANT","getQuestion","id","dispatch","getState","user","response","access_token","status","type","GET_QUESTION","payload","data","question","SET_QUESTION_ERROR","message","error","getQuestionByQuiz","GET_QUESTION_BY_QUIZ","questions","postQuestionByQuiz","formData","postQuestion","CREATE_QUESTION","putQuestion","EDIT_QUESTION","deleteQuestion","DELETE_QUESTION","deleteQuestionByQuiz","DELETE_QUESTION_BY_QUIZ"],"sources":["C:/Users/PC2/Desktop/_blgashLMS/frontend/src/redux/actions/questionAction.js"],"sourcesContent":["import questionApi from \"./../../apis/questionApi\";\nimport authReducer from \"../reducers/authReducer\";\nimport QUESTION_CONSTANT from \"../constants/questionConstant\";\n\nexport const getQuestion = (id) => {\n    return async (dispatch, getState) => {\n        try { \n          const {\n            authReducer: { user },\n          } = getState();\n\n          const response = await questionApi.getQuestion(id, user.access_token);\n          if(response.status===200){\n            dispatch({\n              type: QUESTION_CONSTANT.GET_QUESTION,\n              payload: response.data.question,\n            })\n          }\n          else\n          {\n            dispatch({\n              type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n              payload: response.data.message,\n            })\n          }\n        } catch (error) {\n          dispatch({ type: QUESTION_CONSTANT.SET_QUESTION_ERROR, payload: error.message})\n\n        }\n      }        \n    };\n\nexport const getQuestionByQuiz = (id) => {\n    return async (dispatch, getState) => {\n        try { \n          const {\n            authReducer: { user },\n          } = getState();\n\n          const response = await questionApi.getQuestionByQuiz(id, user.access_token);\n          if(response.status===200){\n            dispatch({\n              type: QUESTION_CONSTANT.GET_QUESTION_BY_QUIZ,\n              payload: response.data.questions,\n            })\n          }\n          else\n          {\n            dispatch({\n              type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n              payload: response.data.message,\n            })\n          }\n        } catch (error) {\n          dispatch({ type: QUESTION_CONSTANT.SET_QUESTION_ERROR, payload: error.message})\n        }\n      }\n    };\n\nexport const postQuestionByQuiz = (id, formData) => {\n    return async (dispatch, getState) => {\n        try { \n          const {\n            authReducer: { user },\n          } = getState();\n\n          const response = await questionApi.postQuestion(id, formData, user.access_token);\n          if(response.status===200){\n            dispatch({\n              type: QUESTION_CONSTANT.CREATE_QUESTION,\n              payload: response.data.question,\n            })\n          }\n          else\n          {\n            dispatch({\n              type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n              payload: response.data.message,\n            })\n          }\n        } catch (error) {\n          dispatch({ type: QUESTION_CONSTANT.SET_QUESTION_ERROR, payload: error.message})\n        }\n      }\n    };\n\nexport const putQuestion = (id, formData) => {\n    return async (dispatch, getState) => {\n        try { \n          const {\n            authReducer: { user },\n          } = getState();\n\n          const response = await questionApi.putQuestion(id, formData, user.access_token);\n          if(response.status===200){\n            dispatch({\n              type: QUESTION_CONSTANT.EDIT_QUESTION,\n              payload: response.data.question,\n            })\n          }\n          else\n          {\n            dispatch({\n              type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n              payload: response.data.message,\n            })\n          }\n        } catch (error) {\n          dispatch({ type: QUESTION_CONSTANT.SET_QUESTION_ERROR, payload: error.message})\n        }\n      }\n    };\n\nexport const deleteQuestion = (id) => {\n    return async (dispatch) => {\n        try { \n      \n          const response = await questionApi.deleteQuestion(id);\n          if(response.status===200){\n            dispatch({\n              type: QUESTION_CONSTANT.DELETE_QUESTION,\n              payload: id,\n            })\n          }\n          else\n          {\n            dispatch({\n              type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n              payload: response.data.message,\n            })\n          }\n        } catch (error) {\n          dispatch({ type: QUESTION_CONSTANT.SET_QUESTION_ERROR, payload: error.message})\n\n        }\n      }\n            };\n\nexport const deleteQuestionByQuiz = (id, formData) => {\n    return async (dispatch, getState) => {\n        try { \n          const {\n            authReducer: { user },\n          } = getState();\n\n          const response = await questionApi.deleteQuestionByQuiz(id, formData, user.access_token);\n          if(response.status===200){\n            dispatch({\n              type: QUESTION_CONSTANT.DELETE_QUESTION_BY_QUIZ,\n              payload: id,\n            })\n          }\n          else\n          {\n            dispatch({\n              type: QUESTION_CONSTANT.SET_QUESTION_ERROR,\n              payload: response.data.message,\n            })\n          }\n        } catch (error) {\n          dispatch({ type: QUESTION_CONSTANT.SET_QUESTION_ERROR, payload: error.message})\n        }\n      }\n    \n  };\n"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,0BAAxB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AAEA,OAAO,MAAMC,WAAW,GAAIC,EAAD,IAAQ;EAC/B,OAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;IACjC,IAAI;MACF,MAAM;QACJL,WAAW,EAAE;UAAEM;QAAF;MADT,IAEFD,QAAQ,EAFZ;MAIA,MAAME,QAAQ,GAAG,MAAMR,WAAW,CAACG,WAAZ,CAAwBC,EAAxB,EAA4BG,IAAI,CAACE,YAAjC,CAAvB;;MACA,IAAGD,QAAQ,CAACE,MAAT,KAAkB,GAArB,EAAyB;QACvBL,QAAQ,CAAC;UACPM,IAAI,EAAET,iBAAiB,CAACU,YADjB;UAEPC,OAAO,EAAEL,QAAQ,CAACM,IAAT,CAAcC;QAFhB,CAAD,CAAR;MAID,CALD,MAOA;QACEV,QAAQ,CAAC;UACPM,IAAI,EAAET,iBAAiB,CAACc,kBADjB;UAEPH,OAAO,EAAEL,QAAQ,CAACM,IAAT,CAAcG;QAFhB,CAAD,CAAR;MAID;IACF,CAnBD,CAmBE,OAAOC,KAAP,EAAc;MACdb,QAAQ,CAAC;QAAEM,IAAI,EAAET,iBAAiB,CAACc,kBAA1B;QAA8CH,OAAO,EAAEK,KAAK,CAACD;MAA7D,CAAD,CAAR;IAED;EACF,CAxBH;AAyBC,CA1BE;AA4BP,OAAO,MAAME,iBAAiB,GAAIf,EAAD,IAAQ;EACrC,OAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;IACjC,IAAI;MACF,MAAM;QACJL,WAAW,EAAE;UAAEM;QAAF;MADT,IAEFD,QAAQ,EAFZ;MAIA,MAAME,QAAQ,GAAG,MAAMR,WAAW,CAACmB,iBAAZ,CAA8Bf,EAA9B,EAAkCG,IAAI,CAACE,YAAvC,CAAvB;;MACA,IAAGD,QAAQ,CAACE,MAAT,KAAkB,GAArB,EAAyB;QACvBL,QAAQ,CAAC;UACPM,IAAI,EAAET,iBAAiB,CAACkB,oBADjB;UAEPP,OAAO,EAAEL,QAAQ,CAACM,IAAT,CAAcO;QAFhB,CAAD,CAAR;MAID,CALD,MAOA;QACEhB,QAAQ,CAAC;UACPM,IAAI,EAAET,iBAAiB,CAACc,kBADjB;UAEPH,OAAO,EAAEL,QAAQ,CAACM,IAAT,CAAcG;QAFhB,CAAD,CAAR;MAID;IACF,CAnBD,CAmBE,OAAOC,KAAP,EAAc;MACdb,QAAQ,CAAC;QAAEM,IAAI,EAAET,iBAAiB,CAACc,kBAA1B;QAA8CH,OAAO,EAAEK,KAAK,CAACD;MAA7D,CAAD,CAAR;IACD;EACF,CAvBH;AAwBC,CAzBE;AA2BP,OAAO,MAAMK,kBAAkB,GAAG,CAAClB,EAAD,EAAKmB,QAAL,KAAkB;EAChD,OAAO,OAAOlB,QAAP,EAAiBC,QAAjB,KAA8B;IACjC,IAAI;MACF,MAAM;QACJL,WAAW,EAAE;UAAEM;QAAF;MADT,IAEFD,QAAQ,EAFZ;MAIA,MAAME,QAAQ,GAAG,MAAMR,WAAW,CAACwB,YAAZ,CAAyBpB,EAAzB,EAA6BmB,QAA7B,EAAuChB,IAAI,CAACE,YAA5C,CAAvB;;MACA,IAAGD,QAAQ,CAACE,MAAT,KAAkB,GAArB,EAAyB;QACvBL,QAAQ,CAAC;UACPM,IAAI,EAAET,iBAAiB,CAACuB,eADjB;UAEPZ,OAAO,EAAEL,QAAQ,CAACM,IAAT,CAAcC;QAFhB,CAAD,CAAR;MAID,CALD,MAOA;QACEV,QAAQ,CAAC;UACPM,IAAI,EAAET,iBAAiB,CAACc,kBADjB;UAEPH,OAAO,EAAEL,QAAQ,CAACM,IAAT,CAAcG;QAFhB,CAAD,CAAR;MAID;IACF,CAnBD,CAmBE,OAAOC,KAAP,EAAc;MACdb,QAAQ,CAAC;QAAEM,IAAI,EAAET,iBAAiB,CAACc,kBAA1B;QAA8CH,OAAO,EAAEK,KAAK,CAACD;MAA7D,CAAD,CAAR;IACD;EACF,CAvBH;AAwBC,CAzBE;AA2BP,OAAO,MAAMS,WAAW,GAAG,CAACtB,EAAD,EAAKmB,QAAL,KAAkB;EACzC,OAAO,OAAOlB,QAAP,EAAiBC,QAAjB,KAA8B;IACjC,IAAI;MACF,MAAM;QACJL,WAAW,EAAE;UAAEM;QAAF;MADT,IAEFD,QAAQ,EAFZ;MAIA,MAAME,QAAQ,GAAG,MAAMR,WAAW,CAAC0B,WAAZ,CAAwBtB,EAAxB,EAA4BmB,QAA5B,EAAsChB,IAAI,CAACE,YAA3C,CAAvB;;MACA,IAAGD,QAAQ,CAACE,MAAT,KAAkB,GAArB,EAAyB;QACvBL,QAAQ,CAAC;UACPM,IAAI,EAAET,iBAAiB,CAACyB,aADjB;UAEPd,OAAO,EAAEL,QAAQ,CAACM,IAAT,CAAcC;QAFhB,CAAD,CAAR;MAID,CALD,MAOA;QACEV,QAAQ,CAAC;UACPM,IAAI,EAAET,iBAAiB,CAACc,kBADjB;UAEPH,OAAO,EAAEL,QAAQ,CAACM,IAAT,CAAcG;QAFhB,CAAD,CAAR;MAID;IACF,CAnBD,CAmBE,OAAOC,KAAP,EAAc;MACdb,QAAQ,CAAC;QAAEM,IAAI,EAAET,iBAAiB,CAACc,kBAA1B;QAA8CH,OAAO,EAAEK,KAAK,CAACD;MAA7D,CAAD,CAAR;IACD;EACF,CAvBH;AAwBC,CAzBE;AA2BP,OAAO,MAAMW,cAAc,GAAIxB,EAAD,IAAQ;EAClC,OAAO,MAAOC,QAAP,IAAoB;IACvB,IAAI;MAEF,MAAMG,QAAQ,GAAG,MAAMR,WAAW,CAAC4B,cAAZ,CAA2BxB,EAA3B,CAAvB;;MACA,IAAGI,QAAQ,CAACE,MAAT,KAAkB,GAArB,EAAyB;QACvBL,QAAQ,CAAC;UACPM,IAAI,EAAET,iBAAiB,CAAC2B,eADjB;UAEPhB,OAAO,EAAET;QAFF,CAAD,CAAR;MAID,CALD,MAOA;QACEC,QAAQ,CAAC;UACPM,IAAI,EAAET,iBAAiB,CAACc,kBADjB;UAEPH,OAAO,EAAEL,QAAQ,CAACM,IAAT,CAAcG;QAFhB,CAAD,CAAR;MAID;IACF,CAhBD,CAgBE,OAAOC,KAAP,EAAc;MACdb,QAAQ,CAAC;QAAEM,IAAI,EAAET,iBAAiB,CAACc,kBAA1B;QAA8CH,OAAO,EAAEK,KAAK,CAACD;MAA7D,CAAD,CAAR;IAED;EACF,CArBH;AAsBS,CAvBN;AAyBP,OAAO,MAAMa,oBAAoB,GAAG,CAAC1B,EAAD,EAAKmB,QAAL,KAAkB;EAClD,OAAO,OAAOlB,QAAP,EAAiBC,QAAjB,KAA8B;IACjC,IAAI;MACF,MAAM;QACJL,WAAW,EAAE;UAAEM;QAAF;MADT,IAEFD,QAAQ,EAFZ;MAIA,MAAME,QAAQ,GAAG,MAAMR,WAAW,CAAC8B,oBAAZ,CAAiC1B,EAAjC,EAAqCmB,QAArC,EAA+ChB,IAAI,CAACE,YAApD,CAAvB;;MACA,IAAGD,QAAQ,CAACE,MAAT,KAAkB,GAArB,EAAyB;QACvBL,QAAQ,CAAC;UACPM,IAAI,EAAET,iBAAiB,CAAC6B,uBADjB;UAEPlB,OAAO,EAAET;QAFF,CAAD,CAAR;MAID,CALD,MAOA;QACEC,QAAQ,CAAC;UACPM,IAAI,EAAET,iBAAiB,CAACc,kBADjB;UAEPH,OAAO,EAAEL,QAAQ,CAACM,IAAT,CAAcG;QAFhB,CAAD,CAAR;MAID;IACF,CAnBD,CAmBE,OAAOC,KAAP,EAAc;MACdb,QAAQ,CAAC;QAAEM,IAAI,EAAET,iBAAiB,CAACc,kBAA1B;QAA8CH,OAAO,EAAEK,KAAK,CAACD;MAA7D,CAAD,CAAR;IACD;EACF,CAvBH;AAyBD,CA1BI"},"metadata":{},"sourceType":"module"}