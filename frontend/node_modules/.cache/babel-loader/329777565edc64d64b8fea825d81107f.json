{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC2\\\\Desktop\\\\_blgashLMS\\\\frontend\\\\src\\\\components\\\\QuizAdmin\\\\data.js\",\n    _s = $RefreshSig$();\n\nimport listeningApi from \"apis/listeningApi\";\nimport grammarApi from \"apis/grammarApi\";\nimport ListeningDetailModal from \"components/UI/ListeningDetailModal\";\nimport { equalArray } from \"helper\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport ListeningAdmin from \"./index\";\nimport quizApi from \"apis/quizApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction QuizAdminData() {\n  _s();\n\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState(\"Newest\");\n  const [packInfo, setPackInfo] = useState(() => ({\n    type: \"All\"\n  }));\n  const [loading, setLoading] = useState(true);\n  const [listen, setListen] = useState([]);\n  const [grammar, setGrammar] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const settingWordPack = info => {\n    // check old pack vs new pack\n    let isEqual = true;\n\n    if (packInfo !== 'type' && packInfo.type !== info.type) {\n      isEqual = false;\n    }\n\n    if (isEqual) isEqual = equalArray(packInfo.type, info.type);\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setListen([]);\n    setGrammar([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n\n  const onSearchWord = async name => {// try {\n    //   if (name === \"\") {\n    //     setList(preSearchList.current);\n    //     setMore(true);\n    //     return;\n    //   }\n    //   const apiRes = await listeningApi.searchListen(name);\n    //   if (apiRes.status === 200) {\n    //     // const { packList = [] } = apiRes.data.listens;\n    //     setList(apiRes.data.listens);\n    //     setMore(false);\n    //   }\n    // } catch (error) {}\n  }; // get word pack\n\n\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        setLoading(true);\n        let apiRes = null;\n\n        if (packInfo.type === \"All\") {\n          apiRes = await quizApi.getAllListenAndGrammar();\n        } else {\n          console.log(packInfo);\n\n          if (packInfo.type === \"Listen\") {\n            apiRes = await listeningApi.getAllListen(\"Newest\");\n          } else {\n            apiRes = await grammarApi.getAllGrammar();\n          }\n        } // const apiRes = await quizApi.getAllListenAndGrammar();\n\n\n        if (apiRes.status === 200 && isSub) {\n          // const { packList = [] } = apiRes.data.listens;\n          // const newList = apiRes.data.listens;\n          // preSearchList.current = newList;\n          if (apiRes.data.listens) {\n            setListen(apiRes.data.listens);\n          }\n\n          if (apiRes.data.grammars) {\n            setGrammar(apiRes.data.grammars);\n          }\n        }\n      } catch (error) {} finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => isSub = false;\n  }, [page, packInfo, sortType]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListeningAdmin, {\n      listen: listen,\n      grammar: grammar,\n      loading: loading,\n      onLoadData: nextPage,\n      more: more,\n      isFirstLoad: isFirstLoad,\n      onSettingWordPack: settingWordPack // onSortTypeChange={onSortTypeChange}\n      ,\n      onSearchWord: onSearchWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListeningDetailModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(QuizAdminData, \"ve5UA/rq3uJPy8D+S+DG0+BsAqE=\");\n\n_c = QuizAdminData;\nexport default QuizAdminData;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizAdminData\");","map":{"version":3,"names":["listeningApi","grammarApi","ListeningDetailModal","equalArray","React","useEffect","useRef","useState","ListeningAdmin","quizApi","QuizAdminData","page","setPage","sortType","setSortType","packInfo","setPackInfo","type","loading","setLoading","listen","setListen","grammar","setGrammar","more","setMore","isFirstLoad","setIsFirstLoad","totalPage","preSearchList","nextPage","current","settingWordPack","info","isEqual","onSearchWord","name","isSub","apiRes","getAllListenAndGrammar","console","log","getAllListen","getAllGrammar","status","data","listens","grammars","error"],"sources":["C:/Users/PC2/Desktop/_blgashLMS/frontend/src/components/QuizAdmin/data.js"],"sourcesContent":["import listeningApi from \"apis/listeningApi\";\nimport grammarApi from \"apis/grammarApi\";\nimport ListeningDetailModal from \"components/UI/ListeningDetailModal\";\nimport { equalArray } from \"helper\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport ListeningAdmin from \"./index\";\nimport quizApi from \"apis/quizApi\";\n\nfunction QuizAdminData() {\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState(\"Newest\");\n  const [packInfo, setPackInfo] = useState(() => ({\n   type: \"All\",\n  }));\n  const [loading, setLoading] = useState(true);\n  const [listen, setListen] = useState([]);\n  const [grammar, setGrammar] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const settingWordPack = (info) => {\n    // check old pack vs new pack\n    let isEqual = true;\n    if (packInfo !== 'type' && packInfo.type !== info.type) {\n      isEqual = false;\n    }\n    if (isEqual) isEqual = equalArray(packInfo.type, info.type);\n\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setListen([]);\n    setGrammar([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n\n\n  const onSearchWord = async (name) => {\n    // try {\n    //   if (name === \"\") {\n    //     setList(preSearchList.current);\n    //     setMore(true);\n    //     return;\n    //   }\n    //   const apiRes = await listeningApi.searchListen(name);\n    //   if (apiRes.status === 200) {\n    //     // const { packList = [] } = apiRes.data.listens;\n    //     setList(apiRes.data.listens);\n    //     setMore(false);\n    //   }\n    // } catch (error) {}\n  };\n\n  // get word pack\n  useEffect(() => {\n    let isSub = true;\n    (async function () {\n      try {\n        setLoading(true);\n        let apiRes = null;\n        if (packInfo.type === \"All\") {\n          apiRes = await quizApi.getAllListenAndGrammar();\n        } \n        else {\n          console.log(packInfo)\n          if(packInfo.type === \"Listen\"){\n            apiRes = await listeningApi.getAllListen(\"Newest\")\n          }\n          else{\n            apiRes = await grammarApi.getAllGrammar();\n          }\n        }\n       // const apiRes = await quizApi.getAllListenAndGrammar();\n        if (apiRes.status ===200 && isSub) {\n          // const { packList = [] } = apiRes.data.listens;\n          // const newList = apiRes.data.listens;\n          // preSearchList.current = newList;\n          if(apiRes.data.listens){\n            setListen(apiRes.data.listens);\n          }\n          if(apiRes.data.grammars){\n            setGrammar(apiRes.data.grammars);\n          }\n        }\n      } catch (error) {\n      } finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => (isSub = false);\n  }, [page, packInfo, sortType]);\n\n  return (\n    <>\n      <ListeningAdmin\n        listen={listen}\n        grammar={grammar}\n        loading={loading}\n        onLoadData={nextPage}\n        more={more}\n        isFirstLoad={isFirstLoad}\n        onSettingWordPack={settingWordPack}\n        // onSortTypeChange={onSortTypeChange}\n        onSearchWord={onSearchWord}\n      />\n      <ListeningDetailModal />\n    </>\n  );\n}\n\nexport default QuizAdminData;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}