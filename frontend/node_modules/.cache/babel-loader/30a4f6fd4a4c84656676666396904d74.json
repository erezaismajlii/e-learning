{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC2\\\\Desktop\\\\_blgashLMS\\\\frontend\\\\src\\\\components\\\\GrammarAdmin\\\\CreateGrammar\\\\data.js\",\n    _s = $RefreshSig$();\n\nimport grammarApi from 'apis/grammarApi';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport CreateGrammar from './index';\nimport { setMessage } from 'redux/actions/messageAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst analysisLinkVideo = function () {\n  let linkVideo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  if (typeof linkVideo !== 'string' || linkVideo === '') {\n    return null;\n  }\n\n  let checkVid = linkVideo.includes(\"https://www.youtube.com\");\n\n  if (!checkVid) {\n    checkVid = linkVideo.includes(\"youtu.be/\");\n\n    if (checkVid) {\n      return linkVideo;\n    }\n\n    return null;\n  }\n\n  return linkVideo;\n};\n\nfunction CreateGrammarData() {\n  _s();\n\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async data => {\n    try {\n      setSubmitting(true);\n      const {\n        VidUpload,\n        LinkVideo,\n        ...rest\n      } = data;\n\n      if (VidUpload && LinkVideo && LinkVideo.trim() != \"\") {\n        dispatch(setMessage(\"Chọn một trong hai tùy chọn để thêm video\", \"warning\"));\n        setSubmitting(false);\n        return;\n      }\n\n      let dataSend = [];\n\n      if (VidUpload == null) {\n        if (LinkVideo || LinkVideo.trim() != '') {\n          //  console.log(data)\n          const videoUrl = analysisLinkVideo(LinkVideo);\n\n          if (videoUrl == null) {\n            dispatch(setMessage(\"Link video is invalid.\", \"warning\"));\n            setSubmitting(false);\n            return;\n          }\n\n          dataSend = { ...rest,\n            Video: videoUrl\n          };\n        } else {\n          dataSend = { ...rest\n          };\n        }\n      } else {\n        dataSend = { ...rest,\n          Video: VidUpload\n        };\n      }\n\n      console.log(dataSend);\n      const apiRes = await grammarApi.postGrammar(dataSend);\n\n      if (apiRes.status === 200) {\n        dispatch(setMessage(\"Created grammar successfully\", \"success\"));\n        setSubmitting(false);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error, can not create listening.';\n      dispatch(setMessage(message, \"error\"));\n      setSubmitting(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CreateGrammar, {\n    onSubmitForm: handleSubmit,\n    submitting: submitting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateGrammarData, \"5iB+qujXnQj6jBoSGKljUlKKZP8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = CreateGrammarData;\nexport default CreateGrammarData;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateGrammarData\");","map":{"version":3,"names":["grammarApi","React","useState","useDispatch","CreateGrammar","setMessage","analysisLinkVideo","linkVideo","checkVid","includes","CreateGrammarData","submitting","setSubmitting","dispatch","handleSubmit","data","VidUpload","LinkVideo","rest","trim","dataSend","videoUrl","Video","console","log","apiRes","postGrammar","status","error","message","response"],"sources":["C:/Users/PC2/Desktop/_blgashLMS/frontend/src/components/GrammarAdmin/CreateGrammar/data.js"],"sourcesContent":["import grammarApi from 'apis/grammarApi';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport CreateGrammar from './index';\nimport { setMessage } from 'redux/actions/messageAction';\n\nconst analysisLinkVideo = (linkVideo = '') => {\n  if (typeof linkVideo !== 'string' || linkVideo === '') {\n    return null;\n  }\n\n  let checkVid = linkVideo.includes(\"https://www.youtube.com\")\n  if(!checkVid){\n      checkVid =linkVideo.includes(\"youtu.be/\")\n      if(checkVid)\n      {\n        return linkVideo;\n      }\n      return null;\n  }\n  return linkVideo;\n};\n\n\nfunction CreateGrammarData() {\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n\n  const handleSubmit = async (data) => {\n    try {\n      setSubmitting(true);\n      const { VidUpload, LinkVideo, ...rest } = data;\n      \n      if (VidUpload && LinkVideo && LinkVideo.trim()!=\"\"){\n        dispatch(setMessage(\"Chọn một trong hai tùy chọn để thêm video\", \"warning\"));\n        setSubmitting(false);\n        return;\n      }\n\n      let dataSend = []\n      if(VidUpload == null){\n          if(LinkVideo || LinkVideo.trim()!='' ){\n        //  console.log(data)\n          const videoUrl = analysisLinkVideo(LinkVideo);\n          if (videoUrl==null) {\n            dispatch(setMessage(\"Link video is invalid.\", \"warning\"));\n            setSubmitting(false);\n            return;\n          }\n          dataSend ={\n            ...rest,\n          Video: videoUrl,\n          };\n        }\n        else{\n          dataSend ={\n            ...rest,\n          };\n        }\n      }\n      else{\n        dataSend ={\n          ...rest,\n         Video: VidUpload,\n        };  \n      }  \n      console.log(dataSend);   \n      const apiRes = await grammarApi.postGrammar(dataSend);\n\n      if (apiRes.status === 200) {\n        dispatch(setMessage(\"Created grammar successfully\", \"success\"));\n        setSubmitting(false);\n     }\n\n    } catch (error) {\n      const message =  error.response?.data?.message ||\n      'Error, can not create listening.';\n        dispatch(setMessage(message, \"error\"));\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <CreateGrammar onSubmitForm={handleSubmit} submitting={submitting} />\n  );\n}\n\nexport default CreateGrammarData;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}