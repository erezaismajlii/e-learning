{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC2\\\\Desktop\\\\_blgashLMS\\\\frontend\\\\src\\\\components\\\\GrammarAdmin\\\\data.js\",\n    _s = $RefreshSig$();\n\nimport grammarApi from \"apis/grammarApi\";\nimport GrammarDetailModal from \"components/UI/GrammarDetailModal\";\nimport { equalArray } from \"helper\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport GrammarAdmin from \"./index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ListeningAdminData() {\n  _s();\n\n  const [page, setPage] = useState(1);\n  const [packInfo, setPackInfo] = useState(() => ({\n    level: \"All\"\n  }));\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const settingWordPack = info => {\n    // check old pack vs new pack\n    let isEqual = true;\n\n    if (packInfo !== \"level\" && packInfo.level !== info.level) {\n      isEqual = false;\n    }\n\n    if (isEqual) isEqual = equalArray(packInfo.level, info.level);\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setList([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n\n  const onSearchWord = async title => {\n    try {\n      if (title === \"\") {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n\n      const apiRes = await grammarApi.searchGrammar(title);\n      console.log(apiRes.data);\n\n      if (apiRes.status === 200) {\n        setList(apiRes.data);\n        setMore(false);\n      }\n    } catch (error) {}\n  }; // get word pack\n\n\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        console.log(packInfo);\n        setLoading(true);\n        let apiRes = null;\n\n        if (packInfo.level === \"All\") {\n          apiRes = await grammarApi.getAllGrammar();\n        } else {\n          apiRes = await grammarApi.getGrammarByLevel(packInfo.level);\n        }\n\n        if (apiRes && isSub) {\n          const newList = apiRes.data.grammars.filter(item => {\n            return item.isLocked === 0;\n          });\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {} finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => isSub = false;\n  }, [page, packInfo]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GrammarAdmin, {\n      list: list,\n      loading: loading,\n      onLoadData: nextPage,\n      more: more,\n      isFirstLoad: isFirstLoad,\n      onSettingWordPack: settingWordPack,\n      onSearchWord: onSearchWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GrammarDetailModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ListeningAdminData, \"32Y2HD+lGmqCPOSGBvdOArCvY5k=\");\n\n_c = ListeningAdminData;\nexport default ListeningAdminData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListeningAdminData\");","map":{"version":3,"names":["grammarApi","GrammarDetailModal","equalArray","React","useEffect","useRef","useState","GrammarAdmin","ListeningAdminData","page","setPage","packInfo","setPackInfo","level","loading","setLoading","list","setList","more","setMore","isFirstLoad","setIsFirstLoad","totalPage","preSearchList","nextPage","current","settingWordPack","info","isEqual","onSearchWord","title","apiRes","searchGrammar","console","log","data","status","error","isSub","getAllGrammar","getGrammarByLevel","newList","grammars","filter","item","isLocked"],"sources":["C:/Users/PC2/Desktop/_blgashLMS/frontend/src/components/GrammarAdmin/data.js"],"sourcesContent":["import grammarApi from \"apis/grammarApi\";\nimport GrammarDetailModal from \"components/UI/GrammarDetailModal\";\nimport { equalArray } from \"helper\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport GrammarAdmin from \"./index\";\n\nfunction ListeningAdminData() {\n  const [page, setPage] = useState(1);\n  const [packInfo, setPackInfo] = useState(() => ({\n    level: \"All\",\n  }));\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const settingWordPack = (info) => {\n    // check old pack vs new pack\n    let isEqual = true;\n    if (packInfo !== \"level\" && packInfo.level !== info.level) {\n      isEqual = false;\n    }\n    if (isEqual) isEqual = equalArray(packInfo.level, info.level);\n\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setList([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n\n  const onSearchWord = async (title) => {\n    try {\n      if (title === \"\") {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n      const apiRes = await grammarApi.searchGrammar(title);\n      console.log(apiRes.data);\n      if (apiRes.status === 200) {\n        setList(apiRes.data);\n        setMore(false);\n      }\n    } catch (error) {}\n  };\n\n  // get word pack\n  useEffect(() => {\n    let isSub = true;\n    (async function () {\n      try {\n        console.log(packInfo);\n        setLoading(true);\n        let apiRes = null;\n        if (packInfo.level === \"All\") {\n          apiRes = await grammarApi.getAllGrammar();\n        } else {\n          apiRes = await grammarApi.getGrammarByLevel(packInfo.level);\n        }\n        if (apiRes && isSub) {\n          const newList = apiRes.data.grammars.filter((item) => {\n            return item.isLocked === 0\n          })\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {\n      } finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => (isSub = false);\n  }, [page, packInfo]);\n\n  return (\n    <>\n      <GrammarAdmin\n        list={list}\n        loading={loading}\n        onLoadData={nextPage}\n        more={more}\n        isFirstLoad={isFirstLoad}\n        onSettingWordPack={settingWordPack}\n        onSearchWord={onSearchWord}\n      />\n      <GrammarDetailModal />\n    </>\n  );\n}\n\nexport default ListeningAdminData;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}