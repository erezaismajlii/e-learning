{"ast":null,"code":"import GRAMMAR_CONSTANT from \"../constants/grammarConstant\";\nimport grammarApi from \"./../../apis/grammarApi\";\nexport const getGrammar = id => {\n  return async dispatch => {\n    try {\n      const response = await grammarApi.getGrammar(id);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.GET_GRAMMAR,\n          payload: response.data\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const getAllGrammar = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_LOADING,\n        payload: true\n      });\n      const {\n        authReducer: {\n          user\n        }\n      } = getState();\n      const response = await grammarApi.getAllGrammar(user.access_token);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.GET_ALL_GRAMMAR,\n          payload: response.data.grammars\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const getGrammarByLevel = level => {\n  return async dispatch => {\n    try {\n      const response = await grammarApi.getGrammarByLevel(level);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.GET_GRAMMAR_BY_LEVEL,\n          payload: response.data.grammars\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const getGrammarLevels = () => {\n  return async dispatch => {\n    try {\n      const response = await grammarApi.getGrammarLevels();\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.GET_GRAMMAR_LEVELS,\n          payload: response.data.levels\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const postGrammar = formData => {\n  return async dispatch => {\n    try {\n      const response = await grammarApi.postGrammar(formData);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.CREATE_GRAMMAR,\n          payload: response.data.grammar\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const putGrammar = (id, formData) => {\n  return async dispatch => {\n    try {\n      const response = await grammarApi.putGrammar(id, formData);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.EDIT_GRAMMAR,\n          payload: response.data.grammar\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};\nexport const deleteGrammar = id => {\n  return async dispatch => {\n    try {\n      const response = await grammarApi.deleteGrammar(id);\n\n      if (response.status === 200) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.DELETE_GRAMMAR,\n          payload: id\n        });\n      } else {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: response.data.message\n        });\n      }\n    } catch (error) {\n      dispatch({\n        type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n        payload: error.response.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["GRAMMAR_CONSTANT","grammarApi","getGrammar","id","dispatch","response","status","type","GET_GRAMMAR","payload","data","SET_GRAMMAR_ERROR","message","error","getAllGrammar","getState","SET_GRAMMAR_LOADING","authReducer","user","access_token","GET_ALL_GRAMMAR","grammars","getGrammarByLevel","level","GET_GRAMMAR_BY_LEVEL","getGrammarLevels","GET_GRAMMAR_LEVELS","levels","postGrammar","formData","CREATE_GRAMMAR","grammar","putGrammar","EDIT_GRAMMAR","deleteGrammar","DELETE_GRAMMAR"],"sources":["C:/Users/PC2/Desktop/_blgashLMS/frontend/src/redux/actions/grammarAction.js"],"sourcesContent":["import GRAMMAR_CONSTANT from \"../constants/grammarConstant\";\nimport grammarApi from \"./../../apis/grammarApi\";\n\n\nexport const getGrammar = (id) => {\n    return async (dispatch) => {\n        try { \n          const response = await grammarApi.getGrammar(id);\n          if(response.status===200){\n            dispatch({\n              type: GRAMMAR_CONSTANT.GET_GRAMMAR,\n              payload: response.data,\n            })\n          }\n          else\n          {\n            dispatch({\n              type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n              payload: response.data.message,\n            })\n          }\n        } catch (error) {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: error.response.message,\n          })\n        }\n      }\n};\n\nexport const getAllGrammar = () => {\n  return async (dispatch, getState) => {\n      try { \n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_LOADING,\n          payload:true,\n        });\n\n        const {\n          authReducer: { user },\n        } = getState();\n\n        const response = await grammarApi.getAllGrammar(user.access_token);\n        if(response.status===200){\n          dispatch({\n            type: GRAMMAR_CONSTANT.GET_ALL_GRAMMAR,\n            payload: response.data.grammars,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const getGrammarByLevel = (level) => {\n  return async (dispatch) => {\n      try { \n        const response = await grammarApi.getGrammarByLevel(level);\n        if(response.status===200){\n          dispatch({\n            type: GRAMMAR_CONSTANT.GET_GRAMMAR_BY_LEVEL,\n            payload: response.data.grammars,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const getGrammarLevels = () => {\n  return async (dispatch) => {\n      try { \n        const response = await grammarApi.getGrammarLevels();\n        if(response.status===200){\n          dispatch({\n            type: GRAMMAR_CONSTANT.GET_GRAMMAR_LEVELS,\n            payload: response.data.levels,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const postGrammar = (formData) => {\n  return async (dispatch) => {\n      try { \n        const response = await grammarApi.postGrammar(formData);\n        if(response.status===200){\n          dispatch({\n            type: GRAMMAR_CONSTANT.CREATE_GRAMMAR,\n            payload: response.data.grammar,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const putGrammar = (id, formData) => {\n  return async (dispatch)=>{\n    try{\n        const response = await grammarApi.putGrammar(id, formData);\n        if(response.status===200){\n          dispatch({\n            type: GRAMMAR_CONSTANT.EDIT_GRAMMAR,\n            payload: response.data.grammar,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: error.response.message,\n        })\n      }\n    }\n};\n\nexport const deleteGrammar = (id) => {\n  return async (dispatch) => {\n      try { \n        const response = await grammarApi.deleteGrammar(id);\n        if(response.status===200){\n          dispatch({\n            type: GRAMMAR_CONSTANT.DELETE_GRAMMAR,\n            payload: id,\n          })\n        }\n        else\n        {\n          dispatch({\n            type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n            payload: response.data.message,\n          })\n        }\n      } catch (error) {\n        dispatch({\n          type: GRAMMAR_CONSTANT.SET_GRAMMAR_ERROR,\n          payload: error.response.message,\n        })\n      }\n    }\n};\n"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAGA,OAAO,MAAMC,UAAU,GAAIC,EAAD,IAAQ;EAC9B,OAAO,MAAOC,QAAP,IAAoB;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,UAAU,CAACC,UAAX,CAAsBC,EAAtB,CAAvB;;MACA,IAAGE,QAAQ,CAACC,MAAT,KAAkB,GAArB,EAAyB;QACvBF,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAACQ,WADhB;UAEPC,OAAO,EAAEJ,QAAQ,CAACK;QAFX,CAAD,CAAR;MAID,CALD,MAOA;QACEN,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;UAEPF,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcE;QAFhB,CAAD,CAAR;MAID;IACF,CAfD,CAeE,OAAOC,KAAP,EAAc;MACdT,QAAQ,CAAC;QACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;QAEPF,OAAO,EAAEI,KAAK,CAACR,QAAN,CAAeO;MAFjB,CAAD,CAAR;IAID;EACF,CAtBH;AAuBH,CAxBM;AA0BP,OAAO,MAAME,aAAa,GAAG,MAAM;EACjC,OAAO,OAAOV,QAAP,EAAiBW,QAAjB,KAA8B;IACjC,IAAI;MACFX,QAAQ,CAAC;QACPG,IAAI,EAAEP,gBAAgB,CAACgB,mBADhB;QAEPP,OAAO,EAAC;MAFD,CAAD,CAAR;MAKA,MAAM;QACJQ,WAAW,EAAE;UAAEC;QAAF;MADT,IAEFH,QAAQ,EAFZ;MAIA,MAAMV,QAAQ,GAAG,MAAMJ,UAAU,CAACa,aAAX,CAAyBI,IAAI,CAACC,YAA9B,CAAvB;;MACA,IAAGd,QAAQ,CAACC,MAAT,KAAkB,GAArB,EAAyB;QACvBF,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAACoB,eADhB;UAEPX,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcW;QAFhB,CAAD,CAAR;MAID,CALD,MAOA;QACEjB,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;UAEPF,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcE;QAFhB,CAAD,CAAR;MAID;IACF,CAxBD,CAwBE,OAAOC,KAAP,EAAc;MACdT,QAAQ,CAAC;QACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;QAEPF,OAAO,EAAEI,KAAK,CAACR,QAAN,CAAeO;MAFjB,CAAD,CAAR;IAID;EACF,CA/BH;AAgCD,CAjCM;AAmCP,OAAO,MAAMU,iBAAiB,GAAIC,KAAD,IAAW;EAC1C,OAAO,MAAOnB,QAAP,IAAoB;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,UAAU,CAACqB,iBAAX,CAA6BC,KAA7B,CAAvB;;MACA,IAAGlB,QAAQ,CAACC,MAAT,KAAkB,GAArB,EAAyB;QACvBF,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAACwB,oBADhB;UAEPf,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcW;QAFhB,CAAD,CAAR;MAID,CALD,MAOA;QACEjB,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;UAEPF,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcE;QAFhB,CAAD,CAAR;MAID;IACF,CAfD,CAeE,OAAOC,KAAP,EAAc;MACdT,QAAQ,CAAC;QACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;QAEPF,OAAO,EAAEI,KAAK,CAACR,QAAN,CAAeO;MAFjB,CAAD,CAAR;IAID;EACF,CAtBH;AAuBD,CAxBM;AA0BP,OAAO,MAAMa,gBAAgB,GAAG,MAAM;EACpC,OAAO,MAAOrB,QAAP,IAAoB;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,UAAU,CAACwB,gBAAX,EAAvB;;MACA,IAAGpB,QAAQ,CAACC,MAAT,KAAkB,GAArB,EAAyB;QACvBF,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAAC0B,kBADhB;UAEPjB,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAciB;QAFhB,CAAD,CAAR;MAID,CALD,MAOA;QACEvB,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;UAEPF,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcE;QAFhB,CAAD,CAAR;MAID;IACF,CAfD,CAeE,OAAOC,KAAP,EAAc;MACdT,QAAQ,CAAC;QACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;QAEPF,OAAO,EAAEI,KAAK,CAACR,QAAN,CAAeO;MAFjB,CAAD,CAAR;IAID;EACF,CAtBH;AAuBD,CAxBM;AA0BP,OAAO,MAAMgB,WAAW,GAAIC,QAAD,IAAc;EACvC,OAAO,MAAOzB,QAAP,IAAoB;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,UAAU,CAAC2B,WAAX,CAAuBC,QAAvB,CAAvB;;MACA,IAAGxB,QAAQ,CAACC,MAAT,KAAkB,GAArB,EAAyB;QACvBF,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAAC8B,cADhB;UAEPrB,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcqB;QAFhB,CAAD,CAAR;MAID,CALD,MAOA;QACE3B,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;UAEPF,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcE;QAFhB,CAAD,CAAR;MAID;IACF,CAfD,CAeE,OAAOC,KAAP,EAAc;MACdT,QAAQ,CAAC;QACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;QAEPF,OAAO,EAAEI,KAAK,CAACR,QAAN,CAAeO;MAFjB,CAAD,CAAR;IAID;EACF,CAtBH;AAuBD,CAxBM;AA0BP,OAAO,MAAMoB,UAAU,GAAG,CAAC7B,EAAD,EAAK0B,QAAL,KAAkB;EAC1C,OAAO,MAAOzB,QAAP,IAAkB;IACvB,IAAG;MACC,MAAMC,QAAQ,GAAG,MAAMJ,UAAU,CAAC+B,UAAX,CAAsB7B,EAAtB,EAA0B0B,QAA1B,CAAvB;;MACA,IAAGxB,QAAQ,CAACC,MAAT,KAAkB,GAArB,EAAyB;QACvBF,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAACiC,YADhB;UAEPxB,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcqB;QAFhB,CAAD,CAAR;MAID,CALD,MAOA;QACE3B,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;UAEPF,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcE;QAFhB,CAAD,CAAR;MAID;IACF,CAfH,CAeI,OAAOC,KAAP,EAAc;MACdT,QAAQ,CAAC;QACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;QAEPF,OAAO,EAAEI,KAAK,CAACR,QAAN,CAAeO;MAFjB,CAAD,CAAR;IAID;EACF,CAtBH;AAuBD,CAxBM;AA0BP,OAAO,MAAMsB,aAAa,GAAI/B,EAAD,IAAQ;EACnC,OAAO,MAAOC,QAAP,IAAoB;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,UAAU,CAACiC,aAAX,CAAyB/B,EAAzB,CAAvB;;MACA,IAAGE,QAAQ,CAACC,MAAT,KAAkB,GAArB,EAAyB;QACvBF,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAACmC,cADhB;UAEP1B,OAAO,EAAEN;QAFF,CAAD,CAAR;MAID,CALD,MAOA;QACEC,QAAQ,CAAC;UACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;UAEPF,OAAO,EAAEJ,QAAQ,CAACK,IAAT,CAAcE;QAFhB,CAAD,CAAR;MAID;IACF,CAfD,CAeE,OAAOC,KAAP,EAAc;MACdT,QAAQ,CAAC;QACPG,IAAI,EAAEP,gBAAgB,CAACW,iBADhB;QAEPF,OAAO,EAAEI,KAAK,CAACR,QAAN,CAAeO;MAFjB,CAAD,CAAR;IAID;EACF,CAtBH;AAuBD,CAxBM"},"metadata":{},"sourceType":"module"}